{"version":3,"sources":["Form.js","Item.js","List.js","App.js","index.js"],"names":["Form","addTodo","useState","value","setValue","onSubmit","e","preventDefault","alert","type","onChange","target","Item","content","id","isDone","deleteTodo","setIsDone","style","textDecoration","onClick","List","todos","map","todo","App","setTodos","nanoid","filter","doneChangeId","ChangeIsDone","rest","ReactDOM","render","document","getElementById"],"mappings":"iKA4BeA,EA1BF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBACGJ,GAILF,EAAQE,GACRC,EAAS,KAJLI,MAAM,iEAQV,SACI,uBACIC,KAAK,OACLN,MAAOA,EACPO,SAAU,SAAAJ,GACNF,EAASE,EAAEK,OAAOR,a,OCWvBS,EA9BF,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAW7C,OACI,+BACI,uBACIR,KAAK,WACLC,SAAU,WACNO,EAAUH,GAAKC,MAIvB,sBACIG,MACI,CAAEC,eAAgBJ,EAAS,eAAiB,QAFpD,SAIEF,IACF,wBAAQO,QAnBK,WAEjBJ,EAAWF,IAiBP,8BCAGO,EAxBF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAON,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAE/B,OACI,6BAEQK,EAAMC,KAAI,SAACC,GACP,OACI,cAAC,EAAD,aACIX,QAASW,EAAKX,QAEdC,GAAIU,EAAKV,GACTC,OAAQS,EAAKT,OACbE,UAAWO,EAAKP,UAChBD,WAAYA,GANhB,YAOeC,GALNO,EAAKV,U,0BCoCvBW,EA1CH,WACR,MAA0BvB,mBAAS,IAAnC,mBAAOoB,EAAP,KAAcI,EAAd,KAgCA,OACI,qCACI,0CACA,cAAC,EAAD,CAAMzB,QAhCE,SAAAE,GACZuB,EAAS,GAAD,mBACDJ,GADC,CAEJ,CACIT,QAASV,EACTW,GAAIa,cACJZ,QAAQ,SA2BZ,cAAC,EAAD,CAAMO,MAAOA,EAAON,WArBT,SAAAF,GAGfY,EAASJ,EAAMM,QAAO,SAAAJ,GAAI,OAAIA,EAAKV,KAAOA,OAkBMG,UAdlC,SAACY,EAAcC,GAC7BJ,EAASJ,EAAMC,KAAI,YAA8B,IAA3BT,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAWgB,EAAW,iBAG5C,OAFAA,EAAKjB,GAAKA,EACViB,EAAKhB,OAASD,IAAOe,EAAeC,EAAef,EAC5CgB,aC7BnBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f46680e3.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Form = ({ addTodo }) => {\n    const [value, setValue] = useState('')\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        if (!value) {\n            alert('何か入力してください')\n            return\n        }\n        addTodo(value)\n        setValue('')\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={value}   // sumit後、テキストを空にする\n                onChange={e => {\n                    setValue(e.target.value)\n                }}\n            />\n        </form>\n    )\n}\n\nexport default Form","import React from 'react'\n\nconst Item = ({ content, id, isDone, deleteTodo, setIsDone }) => {\n\n    // isDone => 現在の状態の参照\n    // setIsDone => 状態を更新する関数\n    // checkboxが変更された際,isDoneの状態を変更する \n\n    const handleDelete = () => {\n        //* Appコンポーネントのもつ、todosから、自分の持つidと同じidを持つ要素を取り除いて欲しい。\n        deleteTodo(id)\n    }\n\n    return (\n        <li>\n            <input\n                type=\"checkbox\"\n                onChange={() => {\n                    setIsDone(id, !isDone)\n                }}\n            />\n\n            <span\n                style={\n                    { textDecoration: isDone ? 'line-through' : 'none' }\n                }\n            >{content}</span>\n            <button onClick={handleDelete}>削除</button>\n        </li>\n    )\n}\n\nexport default Item","import React from 'react'\nimport Item from './Item'\n\nconst List = ({ todos, deleteTodo, setIsDone }) => {\n\n    return (\n        <ul>\n            {\n                todos.map((todo) => {\n                    return (\n                        <Item\n                            content={todo.content}\n                            key={todo.id}\n                            id={todo.id}\n                            isDone={todo.isDone}\n                            setIsDone={todo.setIsDone}\n                            deleteTodo={deleteTodo}\n                            setIsDone={setIsDone}\n\n                        />\n                    )\n                })\n            }\n        </ul>\n    )\n}\n\nexport default List","import React, { useState } from 'react'\nimport Form from './Form'\nimport List from './List'\n\nimport { nanoid } from 'nanoid'\n\nconst App = () => {\n    const [todos, setTodos] = useState([])\n\n    //* 追加機能 \n    const addTodo = value => {\n        setTodos([\n            ...todos,\n            {\n                content: value,\n                id: nanoid(),\n                isDone: false\n            }\n        ])\n    }\n\n    //* 削除機能\n    const deleteTodo = id => {\n        // 渡されたidをもとにそのidのついたtodoを削除する。\n        // 削除したい要素以外の要素を集めた配列で、state`todos`を上書きする。\n        setTodos(todos.filter(todo => todo.id !== id))\n    }\n\n    //* isDoneの変更\n    const setIsDone = (doneChangeId, ChangeIsDone) => {\n        setTodos(todos.map(({ id, isDone, ...rest }) => {\n            rest.id = id\n            rest.isDone = id === doneChangeId ? ChangeIsDone : isDone\n            return rest\n        }))\n    }\n\n\n\n    return (\n        <>\n            <h1>Todo App</h1>\n            <Form addTodo={addTodo} />\n            <List todos={todos} deleteTodo={deleteTodo} setIsDone={setIsDone} />\n        </>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}